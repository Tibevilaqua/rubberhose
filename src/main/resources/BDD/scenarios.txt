#Task1 - Setup of the web service

    Given: the server up and running
    When:  A GET request is performed through the URL "/cross"
    Then:  A json like {"hello world"} will be returned

#Task2 - Import Maven & Mockito & Create a unit test

    Given: The endpoint "/cross" already created
    When:  A test consuming this endpoint is executed
    Then:  The message "hello world" must be returned


#Task3 - Create save crosses endpoint (database mocked)

    Given: The server up and running
    When:  A POST request be performed through the URL "/cross"
    AND    The following Json {"crosses":["A98186","A86389454"]}
    Then:  The crosses will be saved

#Task4 - Create get crosses endpoint (database mocked)

    Given: The server up and running
    AND    data already inserted in the database to be consumed
    When:  A GET request be performed through the URL "/cross"
    Then:  An Json like {
                            "morning": 40
                            ,"evening": 35
                            ,"hourly": 5
                            ,"everyThirtyMinutes": 3
                            ,"everyTwentyMinutes": 2
                            ,"everyFifteenMinutes": 1
                        }
          will be returned comprising information about the number of cars which passed during these periods


#Task5 - Enhance save crosses endpoint (database mocked)

    Given: The server up and running
    When:  A POST request be performed through the URL "/cross"
    AND    The following Json {dayOfWeek: "MONDAY","crosses":["A98186","A86389454"]}
    Then:  The crosses will be saved and linked with the day "MONDAY"


#Task6 - Enhance search crosses endpoint

    Given: The server up and running
    AND    data already inserted in the database to be consumed
    When:  A GET request be performed through the URL "/cross?dayOfTheWee=MONDAY"
    Then:  An Json like {
                            "morning": 40
                            ,"evening": 35
                            ,"hourly": 5
                            ,"everyThirtyMinutes": 3
                            ,"everyTwentyMinutes": 2
                            ,"everyFifteenMinutes": 1

                        }
          will be returned comprising information about the number of cars which passed during these periods

#Task7 - Read JSON files and import the data when the system starts

      Given: There are some files to be inserted straightaway after the server starts
      When:  The server starts
      Then:  All the data contained in the files will be inserted in a database;

#Task8 - Enhance search crosses endpoint (Peak periodDTO)

     Given: The server up and running
     AND    data already inserted in the database to be consumed
     When:  A GET request be performed through the URL "/cross?dayOfTheWee=MONDAY"
     Then:  An Json like {
                           "morning": 1941,
                           "evening": 2550,
                           "hourly": 187,
                           "everyThirtyMinutes": 94,
                           "everyTwentyMinutes": 62,
                           "everyFifteenMinutes": 47,
                           "peakPeriod": {
                             "periodDTO": "8:30AM",
                             "numberOfCars": 247
                           }
                         }
          will be returned comprising information the peak periodDTO


#Task9 - Enhance search crosses endpoint (Speed distribution of traffic)

     Given: The server up and running
     AND    data already inserted in the database to be consumed
     When:  A GET request be performed through the URL "/cross?dayOfTheWee=MONDAY"
     Then:  An Json like {
                           "morning": 1941,
                           "evening": 2550,
                           "hourly": 187,
                           "everyThirtyMinutes": 94,
                           "everyTwentyMinutes": 62,
                           "everyFifteenMinutes": 47,
                           "averageSpeed": 64,
                           "peakPeriod": {
                             "periodDTO": "8:30AM",
                             "numberOfCars": 247
                           }
                         }
          will be returned comprising information the speed average



#Task10 - Enhance save crosses endpoint (Validation of crosses on North Lane "A")

     Given: The server up and running
     When:  A POST request be performed through the URL "/cross"
     AND    the number of crosses are not multiple of 2 (2 axles)
     Then:  an exception requiring the right format of crosses will be thrown

#Task11 - Enhance search crosses endpoint (Implement periodDTO and cars for each 15 minutes)


     Given: The server up and running
     AND    data already inserted in the database to be consumed
     When:  A GET request be performed through the URL "/cross?dayOfTheWee=MONDAY"
     Then:  An Json like {
                           "morning": 1941,
                           "evening": 2550,
                           "hourly": 187,
                           "everyThirtyMinutes": 94,
                           "everyTwentyMinutes": 62,
                           "everyFifteenMinutes": 47,
                           "averageSpeed": 64,
                           "traffic": {
                             "peak": "00:30AM",
                             "numberOfCars": 4,
                             "periods": [
                               {
                                 "periodDTO": "00:00AM",
                                 "numberOfCars": 2
                               },
                               {
                                 "periodDTO": "00:30AM",
                                 "numberOfCars": 4
                               }
                             ]
                           }
                         }
          will be returned comprising information of how many cars have passed every 15 minutes on the road